package oracle.dws;

import javax.xml.ws.WebServiceRef;
import java.util.List;
import oracle.dws.types.*;


// !THE CHANGES MADE TO THIS FILE WILL BE DESTROYED IF REGENERATED!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (11.1.1.0.0, build 100408.1504.05443)

public class CompositionServicePortClient
{
  @WebServiceRef
    private static CompositionService compositionService;  
  
    protected VAR bvar(String var, String val) {
            VAR variable = new VAR();
            variable.setNAME(var);
            variable.setValue(val);
            return variable;
        }
    
    
    public DoCallIDSResponse unlockWIPentry(String config,String uniqueId,String newGroupId,String idsUser, String idsPass, String idsRequestUpdateWip) throws CompositionFault{
          compositionService = new CompositionService();
          CompositionServicePortType compositionServicePortType =
              compositionService.getCompositionServicePort();

          DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
          dwsRequest.setSchemaVersion("1.0");

          DSIMSG dsimsg = new DSIMSG();
          dwsRequest.setDSIMSG(dsimsg);
          MSGVARS msgvars = new MSGVARS();
          dsimsg.setMSGVARS(msgvars);

          List<ROWSET> rsList = msgvars.getROWSET();
          ROWSET rowset = null;
          ROW row = null;
          List<ROW> rowList = null;
          List<VAR> varList = null;
          String value = null;
         
          varList = msgvars.getVAR();
          varList.add(bvar("USERID", idsUser));
          varList.add(bvar("PASSWORD", idsPass));
          //iDM_UpdateWip
          varList.add(bvar("REQTYPE", idsRequestUpdateWip));
          varList.add(bvar("CONFIG", config));
          varList.add(bvar("DPRSTANDARDINDEX","Y"));
          varList.add(bvar("SETBLANKFIELDS", "YES"));
          varList.add(bvar("GOCHANGE", "YES"));

            rowset = new ROWSET();
            rsList.add(rowset);
            rowset.setNAME("WIPS");
            rowList = rowset.getROW();
            
            row = new ROW();
            varList = row.getVAR();
            varList.add(bvar("UNIQUE_ID", uniqueId));
            rowList.add(row);
            
            rowset = new ROWSET();
            rsList.add(rowset);
            rowset.setNAME("NEWWIP");
            rowList = rowset.getROW();
            
            row = new ROW();
            varList = row.getVAR();
            varList.add(bvar("CURRGROUP", newGroupId));
            varList.add(bvar("CURRUSER", ""));
            varList.add(bvar("STATUSCODE", "W"));
            varList.add(bvar("INUSE", ""));
            varList.add(bvar("TRNDOLOG", "2"));
            rowList.add(row);
    
          DoCallIDSResponse response = null;

          response = compositionServicePortType.doCallIDS(dwsRequest);
          return response;                               
    

    }
    public DoCallIDSResponse submitRBC(String config,String uniqueId,String newGroupId,String idsUser, String idsPass, String idsRequestUpdateWip) throws CompositionFault{
        compositionService = new CompositionService();
        CompositionServicePortType compositionServicePortType =
            compositionService.getCompositionServicePort();

        DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
        dwsRequest.setSchemaVersion("1.0");

        DSIMSG dsimsg = new DSIMSG();
        dwsRequest.setDSIMSG(dsimsg);
        MSGVARS msgvars = new MSGVARS();
        dsimsg.setMSGVARS(msgvars);

        List<ROWSET> rsList = msgvars.getROWSET();
        ROWSET rowset = null;
        ROW row = null;
        List<ROW> rowList = null;
        List<VAR> varList = null;
        String value = null;
       
        varList = msgvars.getVAR();
        varList.add(bvar("USERID", idsUser));
        varList.add(bvar("PASSWORD", idsPass));
        //iDM_UpdateWip
        varList.add(bvar("REQTYPE", idsRequestUpdateWip));
        varList.add(bvar("CONFIG", config));
        varList.add(bvar("DPRSTANDARDINDEX","Y"));
        varList.add(bvar("SETBLANKFIELDS", "YES"));
        varList.add(bvar("GOCHANGE", "YES"));

          rowset = new ROWSET();
          rsList.add(rowset);
          rowset.setNAME("WIPS");
          rowList = rowset.getROW();
          
          row = new ROW();
          varList = row.getVAR();
          varList.add(bvar("UNIQUE_ID", uniqueId));
          rowList.add(row);
          
          rowset = new ROWSET();
          rsList.add(rowset);
          rowset.setNAME("NEWWIP");
          rowList = rowset.getROW();
          
          row = new ROW();
          varList = row.getVAR();
          varList.add(bvar("CURRGROUP", newGroupId));
          varList.add(bvar("CURRUSER", ""));
          varList.add(bvar("STATUSCODE", "W"));
          varList.add(bvar("INUSE", ""));
          varList.add(bvar("TRNDOLOG", "2"));
          varList.add(bvar("ROUTEDESC", "Processed by SubmitRBC"));
          rowList.add(row);
  
  
        DoCallIDSResponse response = null;

        response = compositionServicePortType.doCallIDS(dwsRequest);
        return response;                               
  

  }
    public DoCallIDSResponse lockWIPentry(String config,String uniqueId,String groupId,String idsUser, String idsPass, String idsRequestUpdateWip, String userId) throws CompositionFault{
          compositionService = new CompositionService();
          CompositionServicePortType compositionServicePortType =
              compositionService.getCompositionServicePort();

          DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
          dwsRequest.setSchemaVersion("1.0");

          DSIMSG dsimsg = new DSIMSG();
          dwsRequest.setDSIMSG(dsimsg);
          MSGVARS msgvars = new MSGVARS();
          dsimsg.setMSGVARS(msgvars);

          List<ROWSET> rsList = msgvars.getROWSET();
          ROWSET rowset = null;
          ROW row = null;
          List<ROW> rowList = null;
          List<VAR> varList = null;
          String value = null;
         
          varList = msgvars.getVAR();
          varList.add(bvar("USERID", idsUser));
          varList.add(bvar("PASSWORD", idsPass));
          //iDM_UpdateWip
          varList.add(bvar("REQTYPE", idsRequestUpdateWip));
          varList.add(bvar("CONFIG", config));
          varList.add(bvar("DPRSTANDARDINDEX","Y"));
          varList.add(bvar("SETBLANKFIELDS", "YES"));
          varList.add(bvar("GOCHANGE", "YES"));

            rowset = new ROWSET();
            rsList.add(rowset);
            rowset.setNAME("WIPS");
            rowList = rowset.getROW();
            
            row = new ROW();
            varList = row.getVAR();
            varList.add(bvar("UNIQUE_ID", uniqueId));
            rowList.add(row);
            
            rowset = new ROWSET();
            rsList.add(rowset);
            rowset.setNAME("NEWWIP");
            rowList = rowset.getROW();
            
            row = new ROW();
            varList = row.getVAR();
            varList.add(bvar("CURRGROUP", groupId));
            varList.add(bvar("CURRUSER", userId));
            varList.add(bvar("STATUSCODE", "W"));
            varList.add(bvar("INUSE", "Y"));
            varList.add(bvar("TRNDOLOG", "2"));
            rowList.add(row);
 
          DoCallIDSResponse response = null;

          response = compositionServicePortType.doCallIDS(dwsRequest);
          return response;                               
    

    }
    public DoCallIDSResponse getResource(String config,String effectiveDate,String entityId,String resourceName,String resourceType, String idsUser, String idsPass, String idsReqGetResource) throws CompositionFault{
              compositionService = new CompositionService();
              CompositionServicePortType compositionServicePortType =
                  compositionService.getCompositionServicePort();

              DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
              dwsRequest.setSchemaVersion("1.0");

              DSIMSG dsimsg = new DSIMSG();
              dwsRequest.setDSIMSG(dsimsg);
              MSGVARS msgvars = new MSGVARS();
              dsimsg.setMSGVARS(msgvars);

              List<ROWSET> rsList = msgvars.getROWSET();
              ROWSET rowset = null;
              ROW row = null;
              List<ROW> rowList = null;
              List<VAR> varList = null;
              String value = null;
              varList = msgvars.getVAR();
              varList.add(bvar("USERID", idsUser));
              varList.add(bvar("PASSWORD", idsPass));
              varList.add(bvar("REQTYPE", idsReqGetResource));
              varList.add(bvar("CONFIG", config));
              varList.add(bvar("DPRSTANDARDINDEX","Y"));
              varList.add(bvar("EFFECTIVEDATE",effectiveDate));
              varList.add(bvar("entityId",entityId));
              varList.add(bvar("RESOURCENAME",resourceName));
              varList.add(bvar("RESOURCETYPE",resourceType));

              DoCallIDSResponse response = null;

              response = compositionServicePortType.doCallIDS(dwsRequest);
              return response;                                                                              
        }
    public DoCallIDSResponse getWIPentry(String config,String uniqueId,String idsUser, String idsPass, String idsPrintType, String urlPrefix, String idsReqGetWip, String idsReqSave, String servletGetResource, String servletSave, String servletRefresh, String httpUser, String httpUserPass) throws CompositionFault {

            compositionService = new CompositionService();
            CompositionServicePortType compositionServicePortType =
                compositionService.getCompositionServicePort();

            DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
            dwsRequest.setSchemaVersion("1.0");

            DSIMSG dsimsg = new DSIMSG();
            dwsRequest.setDSIMSG(dsimsg);
            MSGVARS msgvars = new MSGVARS();
            dsimsg.setMSGVARS(msgvars);

            List<ROWSET> rsList = msgvars.getROWSET();
            ROWSET rowset = null;
            ROW row = null;
            List<ROW> rowList = null;
            List<VAR> varList = null;
            String value = null;
            varList = msgvars.getVAR();
            varList.add(bvar("USERID", idsUser));
            varList.add(bvar("PASSWORD", idsPass));
            varList.add(bvar("PRTTYPE", idsPrintType));
            
            varList.add(bvar("PUTURL",urlPrefix)); // host prefix for beans.
            varList.add(bvar("HTTPUSERID",httpUser));
            varList.add(bvar("HTTPPASSWORD",httpUserPass));
                                                              
            varList.add(bvar("SAVE_REQTYPE", idsReqSave));
            varList.add(bvar("REQTYPE", idsReqGetWip));

            varList.add(bvar("SCRIPT",servletSave)); // bean used to process a save
            varList.add(bvar("REFRESHSCRIPT",servletRefresh)); //bean used to process a refresh.
            varList.add(bvar("GETSCRIPT",servletGetResource)); //bean used to process resource retrieval request.

            varList.add(bvar("CONFIG", config));
            varList.add(bvar("UNIQUE_ID", uniqueId));

            DoCallIDSResponse response = null;

            response = compositionServicePortType.doCallIDS(dwsRequest);
            return response;
        }
    public DoCallIDSResponse saveWIPEntry(Attachment attachment, String idsReqType, String config,String uniqueId,String currentUser, String idsUser, String idsPass, String idsPrintType) throws CompositionFault {

          compositionService = new CompositionService();
          CompositionServicePortType compositionServicePortType = compositionService.getCompositionServicePort();

          DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
          dwsRequest.setSchemaVersion("1.0");

          DSIMSG dsimsg = new DSIMSG();
          dwsRequest.setDSIMSG(dsimsg);
          
          MSGVARS msgvars = new MSGVARS();
          dsimsg.setMSGVARS(msgvars);
          
          List<Attachment> attachments = dsimsg.getAttachment();
          attachments.add(attachment);
          
          List<ROWSET> rsList = msgvars.getROWSET();
          ROWSET rowset = null;
          ROW row = null;
          List<ROW> rowList = null;
          List<VAR> varList = null;
          String value = null;
          varList = msgvars.getVAR();
          
          varList.add(bvar("REQTYPE",idsReqType));
          varList.add(bvar("USERID", idsUser));
          varList.add(bvar("PASSWORD", idsPass));
          varList.add(bvar("PRTTYPE", idsPrintType));
          varList.add(bvar("DPWRECNUM",uniqueId));          
          varList.add(bvar("CONFIG", config));
          varList.add(bvar("CURRUSER",currentUser));
          DoCallIDSResponse response = null;

          response = compositionServicePortType.doCallIDS(dwsRequest);
          return response;
      }
    public DoCallIDSResponse printWIPEntry(String config,String uniqueId,String idsUser, String idsPass, String idsPrintType, String idsRequestProof) throws CompositionFault {

            compositionService = new CompositionService();
            CompositionServicePortType compositionServicePortType =
                compositionService.getCompositionServicePort();

            DoCallIDSRequest dwsRequest = new DoCallIDSRequest();
            dwsRequest.setSchemaVersion("1.0");

            DSIMSG dsimsg = new DSIMSG();
            dwsRequest.setDSIMSG(dsimsg);
            MSGVARS msgvars = new MSGVARS();
            dsimsg.setMSGVARS(msgvars);

            List<ROWSET> rsList = msgvars.getROWSET();
            ROWSET rowset = null;
            ROW row = null;
            List<ROW> rowList = null;
            List<VAR> varList = null;
            String value = null;
            varList = msgvars.getVAR();
            varList.add(bvar("USERID", idsUser));
            varList.add(bvar("PASSWORD", idsPass));
            varList.add(bvar("PRTTYPE", idsPrintType));
            varList.add(bvar("REQTYPE", idsRequestProof));
            varList.add(bvar("CONFIG", config));
            varList.add(bvar("UNIQUE_ID", uniqueId));

            DoCallIDSResponse response = null;

            response = compositionServicePortType.doCallIDS(dwsRequest);
            return response;
        }
}
